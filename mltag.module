<?php
/**
 * @file
 * Module file.
 */

/**
 * Implements hook_help().
 */
function mltag_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#mltag":
      $msg = 'A module to populate Tags for content using Machine Learning Algorithms - a GSOC 2012 project.
              Here are some steps for using MLTag- <br />
              1. Install MLTag and jump to the configuration page. <br />
              2. Select the algorithm from the drop down list.<br />
              3. Check the \'Enable Learning\' checkbox if you want MLTag to propose Tags based on the Learning Algorithm. Unchecking this option will propose Implicit tags which are based on current content only.<br />
              4. Click the \'Perform Training\' button to train the model.<br />
              5. Click again to confirm the action. It takes some time to train the model based on the amount of content you have on your website.<br />
              6. The status of the Model is displayed right beneath the Perform Training Button.<br />
              7. Check the \'Implicit Tag Count\' checkbox if you want MLTag to train both on Published  & Unpublished content. Unchecking this option trains the model only on Published content.<br />
              8. Specify the max number of Implicit tags you want to propose in the text field. The minimum allowed value here is 10.<br />
              9. The next group of checkboxes displays the Vocabularies defined in the <b>Taxonomy Module</b>. You can add customized terms (which will be given higher priority) for training the model by choosing appropriate vocabularies here.<br />
             10. Below you can check the Node Types on which you want to use MLTag.<br />
             11. Save the settings.<br />
             <br />
             Whenever you add/edit a new article. MLTag displays a button <b>\'Suggest Tags\'</b> in the settings panel. On clicking this Implicit Tags and Learned Tags tables will be popualted by ajax.
             For Implicit tags the terms with the highest Chi Square values are more likely to be tags for the current content.
             The Learned Tags are proposed based on the model we trained earlier.<br />
             Select any number of tags you want to tag the content with and save the article.
             The content will be automatically tagged with the chosen terms.<br />The Learned model will also be updated based on your tagging preferences and on the new textual content you have posted on your website.';
      $output = t($msg);
      break;
  }
  return $output;
}
/**
 * Implements of hook_form_alter().
 */
function mltag_form_alter(&$form, &$form_state, $form_id) {
  $bundles = variable_get('mltag_node_types', array('article'));
  if (isset($form['type']) && $form['type']['#value'] . '_node_form' == $form_id && in_array($form['type']['#value'], $bundles, TRUE)) {
    $form['mltag_new'] = array(
      '#type' => 'fieldset',
      '#title' => t('MLTag settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
      '#weight' => -2,
      '#attributes' => array('class' => array('mltag-settings')),
    );

    $form['mltag_new']['tag'] = array(
      '#type' => 'button',
      '#value' => t("Suggest Tags"),
      '#name' => t('click_tags'),
      '#ajax' => array(
        'callback' => 'mltag_suggest_tags_ajax',
        'wrapper' => 'mltag_suggest_tags_table_div',
        'effect' => 'slide',
      ),
    );

    /*
    $form['mltag_new']['sample_text'] = array(
    '#prefix' => '<div id="mltag_suggest_tags_markup_div">',
    '#suffix' => '</div>',
    '#markup' => t('Your Tags will appear here'),
    );
    */

    $algo = variable_get('algo_type', 2);
    if ($algo == 1) {
      $header = array(
        'tag' => t('Tag'),
        'frequency' => t('Frequency'),
      );
    }
    if ($algo == 2) {
      $header = array(
        'tag' => t('Tags'),
        'chi' => t('Chi Square Value'),
      );
    }
    $form['mltag_new']['myselector'] = array(
      '#prefix' => '<div id="mltag_suggest_tags_table_div">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      // '#markup' => t('Your tags will appear here'),
    );

    $form['mltag_new']['myselector']['implicit_tags'] = array(
      '#type' => 'tableselect',
      '#prefix' => '<h2>Implicit Tags</h2>',
      '#title' => 'My Selector',
      '#header' => $header,
      '#attribute' => array('style' => 'display:none;'),
    );

    $header_learn_tags = array(
      'sno' => t('S. No.'),
      'tags' => t('Tags'),
    );

    $form['mltag_new']['myselector']['learn_tags'] = array(
      '#type' => 'tableselect',
      '#title' => 'Tags from Learning',
      '#prefix' => '<h2>Learned Tags</h2>',
      '#header' => $header_learn_tags,
      '#attribute' => array('style' => 'display:none;'),
    );
    if (isset($form_state['triggering_element'])) {
      if ($form_state['triggering_element']['#name'] == 'click_tags') {
        // Implicit tags.
        $values = $form_state['values'];
        $title = $values['title'];
        $body = '';
        foreach ($values['body'][$values['language']] as $info) {
          $body .= $info['value'];
        }
        $content = check_plain($title) . ' ' . $body;
        if (trim($body) == '' || trim($body) == NULL) {
          $form['mltag_new']['myselector']['error']['#markup'] = t('No content to generate Tags !');
        }
        else {
          $output = '';
          $options_test = mltag_get_implicit_options($content);
          if ($options_test == NULL || empty($options_test)) {
            $output = t('Content is insufficient to generate Tags using this algorithm. <br />Please choose other algorithm from Settings Page.<br />');
            $form['mltag_new']['myselector']['error']['#markup'] = $output;
          }
          else {
            $form['mltag_new']['myselector']['implicit_tags']['#options'] = $options_test;
          }
          // Learned tags.
          if (variable_get('enable_learning') == TRUE) {
            $options_learn = mltag_get_learned_options($content);
            if ($options_learn == NULL || empty($options_learn)) {
              $output .= t("No Tags based on learning were found..<br />This happens if MLTag could not find any relation between new and existing content<br /f> Or if you have not Trained your model recently<br /><b><u>Suggestion</u></b>- Please keep your model Trained up-to-date");
              $form['mltag_new']['myselector']['error']['#markup'] = $output;
              // break;.
            }
            else {
              $form['mltag_new']['myselector']['learn_tags']['#options'] = $options_learn;
            }
          }
        }
      }
    }
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'mltag') . '/css/tableselect.css',
    );
    $form['actions']['submit']['#submit'][] = 'mltag_custom_submit_function';
    // If ends.
  }
  // Function ends.
}
/**
 * Populates implicit tags for the tableselect.
 *
 * @param string $content
 *   Textual content to tag
 */
function mltag_get_implicit_options($content) {
  include_once 'includes/content_tag.inc';
  $algo = variable_get('algo_type');
  // Insert count here.
  $count = variable_get('implicit_tag_count');
  $tags = mltag_content_tag($content, $algo, $count);
  if (empty($tags)) {
    return NULL;
  }
  $options_test = array();
  if ($algo == '1') {
    foreach ($tags as $key => $value) {
      $options_test[$key] = array(
        'tag' => $key,
        'frequency' => $value,
      );
    }
  }
  if ($algo == '2') {
    foreach ($tags as $key => $value) {
      $options_test[$key] = array(
        'tag' => $key,
        'chi' => $value,
      );
    }
  }
  return $options_test;
}
/**
 * Populates learned tags from the content.
 */
function mltag_get_learned_options($content) {
  include_once 'includes/content_tag.inc';
  $tags_from_learning = mltag_content_tag($content, 3, 20);
  if (empty($tags_from_learning)) {
    return NULL;
  }
  $options_learn = array();
  foreach ($tags_from_learning as $key => $value) {
    $options_learn["$value"] = array(
      'sno' => "$key",
      'tags' => "$value",
    );
  }
  return $options_learn;
}

/**
 * Implements ajax callback function.
 */
function mltag_suggest_tags_ajax($form, &$form_state) {
  return $form['mltag_new']['myselector'];
}

/**
 * Implements hook_nodeapi.
 */
function mltag_nodeapi(&$node, $op, $a3, $a4) {
  $fn = 'mltag_node_'. $op;
  if (function_exists($fn)) {
    return $fn($node, $op, $a3, $a4);
  }
}


/**
 * Updates the Taxonomy vocabualry to add the selected terms in the tableselect,
 * tags the content via the tag field.
 */
function mltag_node_presave($node) {
  $selected_implicit_tags = $node->mltag_new['myselector']['implicit_tags'];
  $selected_learned_tags = $node->mltag_new['myselector']['learn_tags'];
  $selected_tags = array();
  foreach ($selected_implicit_tags as $key => $value) {
    if ($value != '0' && $value != NULL && trim($value) != '') {
      $selected_tags[] = $value;
    }
  }
  foreach ($selected_learned_tags as $key => $value) {
    if ($value != '0' && $value != NULL && trim($value) != '') {
      $selected_tags[] = $value;
    }
  }
  $selected_tags = array_unique($selected_tags);
  $vid = 1;
  $term_id = array();
  foreach ($selected_tags as $key => $value) {
    if ($value != NULL && $value != '0') {
      $temp = mltag_custom_create_taxonomy_term($value, $vid);
      $term_id["$temp"] = $value;
    }
  }
  $temp_array = array();

  if (!isset($node->field_tags[$node->language])) {
    $count = 0;
  }
  else {
    $count = count($node->field_tags[$node->language]);
  }
  $user_tags = array();
  if ($node->type == 'article') {
    foreach ($term_id as $tid => $word) {
      $flag = 0;
      $i = 0;
      while ($i < $count) {
        $current_term_id = $node->field_tags[$node->language]["$i"]['tid'];
        $exist_term_object = taxonomy_term_load($current_term_id);
        $name = $exist_term_object->name;
        // Add to user_tags to update the model.
        $user_tags[] = $exist_term_object->name;
        if ($word == $name) {
          // Term already exists.
          $flag = 1;
          break;
        }
        $i++;
      }
      if ($flag == '0') {
        // If term doesnt exist.
        $node->field_tags[$node->language][]['tid'] = $tid;
        $user_tags[] = $word;
      }
    }
    // If ends.
  }
  // Code for updating the model begins.
  $title = $node->title;
  $body = '';
  $body = $node->body[$node->language]['0']['value'];
  $content = check_plain($title) . ' ' . $body;
  // Will be called after data is entered into the database.
  $data_content = &drupal_static('mymodule_block_data');
  $data_content = $content;
  $data_user_tags = &drupal_static('mymodule_block_array');
  $data_user_tags = $user_tags;
}
/**
 * Custom submit function.
 */
function mltag_custom_submit_function($form, &$form_state) {
  // mltag_save_terms();
}
/**
 * Make an entry into mltag_learn_tags table on new node insertion.
 */
function mltag_node_insert($node) {
  $content = &drupal_static('mymodule_block_data');
  $user_tags = &drupal_static('mymodule_block_array');
  $nid = $node->nid;
  include_once 'includes/content_tag.inc';
  $tags = mltag_content_tag($content, 2, 10);
  if ($tags > 5) {
    $timestamp = date('Y-m-d G:i:s');
    $user_tags = array_flip($user_tags);
    _mltag_write_record($tags, $user_tags, $timestamp, $nid);

    $result = db_query("select nid, content_tags from {mltag_learn_tags}");
    $tags_learned = array();
    $tags_learned_array = array();
    while ($record = $result->fetchObject()) {
      $tags_learned["$record->nid"] = unserialize($record->content_tags);
    }

    foreach ($tags_learned as $nid => $array) {
      $tags_learned_array = mltag_merge_array($tags_learned_array, $array);
    }

    $sum = 0;
    foreach ($tags_learned_array as $word => $chi) {
      $sum += $chi;
    }

    $mean = $sum / count($tags_learned_array);
    $sd = mltag_sd($tags_learned_array);
    $ranked_tags = array();
    foreach ($tags_learned_array as $word => $chi) {
      $ranked_tags["$word"] = round((($chi - $mean) / $sd), 4);
    }
    arsort($ranked_tags);
    // $ranked_tags contains tags ranked using z-score.
    $file = drupal_get_path("module", "mltag") . '/includes/learned_tags.txt';
    file_put_contents($file, urlencode(serialize($ranked_tags)));
  }
}
/**
 * Update the entry in mltag_learn_tags on node edit.
 */
function mltag_node_update($node) {
  $content = &drupal_static('mymodule_block_data');
  $user_tags = &drupal_static('mymodule_block_array');
  $nid = $node->nid;
  include_once 'includes/content_tag.inc';
  $tags = mltag_content_tag($content, 2, 10);
  if ($tags > 5) {
    $timestamp = date('Y-m-d G:i:s');
    $user_tags = array_flip($user_tags);

    _mltag_write_record($tags, $user_tags, $timestamp, $nid);

    $result = db_query("select nid, content_tags from {mltag_learn_tags}");
    $tags_learned = array();
    $tags_learned_array = array();
    while ($record = $result->fetchObject()) {
      $tags_learned["$record->nid"] = unserialize($record->content_tags);
    }

    foreach ($tags_learned as $nid => $array) {
      $tags_learned_array = mltag_merge_array($tags_learned_array, $array);
    }
    $sum = 0;
    foreach ($tags_learned_array as $word => $chi) {
      $sum += $chi;
    }
    $mean = $sum / count($tags_learned_array);
    $sd = mltag_sd($tags_learned_array);
    $ranked_tags = array();
    foreach ($tags_learned_array as $word => $chi) {
      $ranked_tags["$word"] = round((($chi - $mean) / $sd), 4);
    }

    arsort($ranked_tags);
    // $ranked_tags contains tags ranked using z-score.
    $file = drupal_get_path("module", "mltag") . '/includes/learned_tags.txt';
    file_put_contents($file, urlencode(serialize($ranked_tags)));
  }
}

/**
 * Helper function for reuable query.
 */
function _mltag_write_record($tags, $user_tags, $ts, $nid) {
  /**
    db_merge('mltag_learn_tags')
    ->key(array('nid' => $nid))
    ->fields(array(
        'content_tags' => serialize($tags),
        'user_tags' => serialize($user_tags),
        'date_created' => $timestamp))
    ->execute();
    **/
  db_query('REPLACE INTO {mltag_learn_tags}
                SET content_tags = "%s", user_tags = "%s", date_created = "%s", nid = %d',
              serialize($tags), serialize($user_tags), $ts, $nid);
}


/**
 * Removes an entry from the database on Node delete.
 */
function mltag_node_delete($node) {
  return db_query("DELETE FROM {mltag_learn_tags} WHERE nid = %d", $node->nid);
}

/**
 * Create a taxonomy term and return the tid.
 */
function mltag_custom_create_taxonomy_term($name, $vid) {
  $term = new stdClass();
  $term->name = $name;
  $term->vid = $vid;
  taxonomy_term_save($term);
  return $term->tid;
}

/**
 * Get Vocabulary.
 *
 * This function will return a vocabulary object which matches the
 * given name. Will return null if no such vocabulary exists.
 *
 * @param String $vocabulary_name
 *   This is the name of the section which is required.
 *
 * @return Object
 *   This is the vocabulary object with the name or null if no such vocabulary
 *   exists.
 */
function mltag_get_vocabulary_by_name($vocabulary_name) {
  $vocabs = taxonomy_get_vocabularies(NULL);
  foreach ($vocabs as $vocab_object) {
    if ($vocab_object->name == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}

/**
 * Implements hook_menu().
 */
function mltag_menu() {
  $items = array();
  $items['admin/settings/mltag'] = array(
    'title' => 'MLTag Configuration Center',
    'description' => 'Settings for MLTag module',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/settings/mltag/settings'] = array(
    'title' => 'MLtag Settings',
    'description' => 'Change General settings of MLTag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mltag_general_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );
  /*
  $items['admin/settings/mltag/stopwords'] = array(
  'title' => 'MLtag Stopwords',
  'description' => 'Alter StopWords used while parsing',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('mltag_stopwords_settings'),
  'type' => MENU_NORMAL_ITEM,
  'access arguments' => array('administer site configuration'),
  );
  */
  $items['admin/settings/mltag/train'] = array(
    'title' => 'MLTag Train Model',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mltag_configure_train_confirm'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements mltag general settings form().
 */
function mltag_general_settings() {
  $result = db_query("select MAX(date_created) from {mltag_learn_tags}");
  $record = db_fetch_object($result);

  $form['algo_type'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('algo_type', 2),
    '#title' => 'Algorithm',
    '#options' => array(
      1 => 'Term Frequency',
      2 => 'Word Co-occurrence Statistical Algorithm',
    ),
    '#description' => t('Choose an algorithm'),
  );

  $form['enable_learning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Learning algorithm'),
    '#default_value' => variable_get('enable_learning', TRUE),
  );

  $form['mytextcontainer'] = array(
    '#type' => 'container',
    '#states' => array(
      "visible" => array(
        "input[name='enable_learning']" => array("checked" => TRUE)),
    ),
  );

  $form['mytextcontainer']['train'] = array(
    '#type' => 'submit',
    '#value' => t('Perform Training'),
    '#submit' => array('mltag_train_submit'),
    '#description' => t('<p>You can press this button to Train the model on your exisiting website content.</p><p>Training may take some time depending on the amount of website content.</p>'),
  );
  $status = '<br />You can press this button to Train the model on your exisiting website content.';
  $status .= ' Training may take some time depending on the amount of website content.';
  if ($record) {
    $status .= ' <br /><u><b>Status</u> :</b> Model was last trained/updated on: <b>' . $record->date_created . '</b> </p>';
  }
  else {
    $status .= ' <p><u><b>Status</u> :</b> Model has not been trained till now. </p>';
  }
  $form['mytextcontainer']['status'] = array(
    '#markup' => t($status),
  );
  $form['mytextcontainer']['mltag_unpublished'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Unpublished Data for Training'),
    '#default_value' => variable_get('mltag_unpublished', TRUE),
    '#description' => t('Check this option to train the model using both Published & Unpublished content. Unchecking this option trains the model only on Published content.'),
  );

  $form['implicit_tag_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Implicit Tag Count'),
    '#default_value' => variable_get('implicit_tag_count', 15),
    '#size' => 4,
    '#description' => t('Specify the maximum number of implicit tags that MLTag should propose. Minimum allowed value is 10.'),
  );
  if (module_exists('taxonomy')) {
    $vocabulary = array();
    $vocabulary = taxonomy_get_vocabularies();
    $checklist_vocab_array = array();
    foreach ($vocabulary as $item) {
      $checklist_vocab_array[$item->vid] = $item->name;
    }

    $form['user_vocab_list'] = array(
      '#type'             => 'checkboxes',
      '#title'            => t('Add terms to the Trained Model'),
      '#position'         => 'left' ,
      '#options'          => $checklist_vocab_array ,
      '#default_value'    => variable_get('user_vocab_list', FALSE),
      '#description'      => t('Users can add new terms explicitly to the Trained Model by choosing appropriate Vocabularies from above. These terms will be given higher weightage than those learned during Training'),
    );
  }

  $node_types = node_get_types();
  foreach ($node_types as $node_type) {
    $types[$node_type->type] = $node_type->name;
  }

  $form['mltag_node_types'] = array(
    '#type' => 'checkboxes',
    '#default_value' => variable_get('mltag_node_types', array('article')),
    '#title' => t('Node Types'),
    '#options' => $types,
  );
  return system_settings_form($form);
}
/**
 * Validation code for the settings page.
 */
function mltag_general_settings_validate($form, &$form_state) {
  if ($form_state['values']['implicit_tag_count'] < '10') {
    // We notify the form API that this field has failed validation.
    form_set_error('implicit_tag_count', t('Implicit Tag count cannot be less than 10.'));
  }
}
/**
 * Get all children.
 */
function mltag_taxonomy_get_children_all($tid, $vid = 0, $key = 'tid') {
  $c = taxonomy_get_children($tid, $vid, $key);
  $result = array();
  foreach ($c as $t => $d) {
    $result[$t] = $d;
    $below = taxonomy_get_children_all($t, $vid, $key);
    if (!empty($below)) {
      foreach ($below as $nt => $nd) {
        $result[$nt] = $nd;
      }
    }
  }
  return $result;
}
/**
 * Redirect after training.
 */
function mltag_train_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/config/mltag/train';
}

/**
 * Confirm training.
 */
function mltag_configure_train_confirm() {
  return confirm_form(array(), t('Are you sure you want to Train the model?'),
      'admin/config/mltag/settings', t('This action trains the model, and may be a lengthy process.'), t('Perform Training'), t('Cancel'));
}

/**
 * Training confirmed. Start process.
 */
function mltag_configure_train_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $batch = array('operations' => array(array('mltag_train', array(50))));
    batch_set($batch);
  }
}

/**
 * Main training algorithm.
 *
 *	@todo- place a check for minimum content length to be used for algo-2
 *  		and if content length is small use algo-1 instead
 *
 *  @var array $tags_learned
 *  		stores key as nid and value as array of tags
 *  @var array $tags_learned_array
 *  		stores all the implicit tags. key is word and value is it's chi square
 *      value
 *  @var $tags
 *  		 local var inside the while loop stores the implicit tags for the content
 *  @var $user_tags
 *  		 local var inside while loop stores the tags specified explicitly by
 *       the user. When inserted into the DBMS key is the word and value is
 *       the index (done by array-flip).
 */
function mltag_train($limit, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $query = 'SELECT COUNT(DISTINCT nid) FROM {node}';
    if (!variable_get('mltag_unpublished', 0)) {
      $query .= ' WHERE status = 1';
    }
    $context['sandbox']['max'] = db_result(db_query($query));
    $context['sandbox']['tags_learned'] = array();
  }
  $context['sandbox']['set_start'] = $context['sandbox']['current_node'];

  module_load_include('inc', 'mltag', 'includes/content_tag');

  //$record will be an array of node content to work on.
  $query = 'SELECT n.nid, n.title, r.body FROM node n
              LEFT JOIN node_revisions r on n.vid = r.vid
              WHERE n.nid > %d';
  if (!variable_get('mltag_unpublished', 0)) {
    $query .= ' AND n.status = 1';
  }
  $query .= ' ORDER BY n.nid ASC';
  $result = db_query_range($query, $context['sandbox']['current_node'], 0, $limit);
  $record = array();
  while ($row = db_fetch_object($result)) {
    $record[] = $row;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row->nid;
  }
  $num_rows_content = count($record);
  if ($num_rows_content == 0 || $num_rows_content == NULL) {
    drupal_set_message(t('Error : Since there is no pre-existing content on this website, therefore, the model can not be trained.<br /> Please add some content to the website and try again.'), 'error');
    return;
  }

  // This selects the tags specified explicitly by the user for each node.
  $query = 'SELECT t.nid, d.name FROM {term_node} t
              LEFT JOIN {term_data} d ON t.tid = d.tid';
  if (!variable_get('mltag_unpublished', 0)) {
    $query .= ' LEFT JOIN {node} node ON t.nid = node.nid WHERE node.status = 1 AND';
  } else {
    $query .= ' WHERE';
  }
  $query .= ' t.nid >= %d AND t.nid <= %d';
  //$context['message'] = $query;
  $result1 = db_query($query, $context['sandbox']['set_start'], $context['sandbox']['current_node']);
  $terms = array();
  while ($row = db_fetch_object($result1)) {
    $terms[$row->nid][] = $row->name;
  }

  $i = 0;
  while ($i < $num_rows_content) {
    $content = '';
    $content .= $record["$i"]->title;
    $content = $content . ' ' . $record["$i"]->body;
    // Call tagging algorithm and extract 10 tags for each content.
    // $tags array stores the tags dervied using algo 2 for each content.
    $tags = mltag_content_tag($content, 2, 10);
    $tags_count = count($tags);
    if ($tags_count < 10) {
      $diff = 10 - $tags_count;
      $tags_extra = array();
      $tags_extra = mltag_content_tag($content, 1, $diff);
      $tags = array_merge($tags, $tags_extra);
    }

    $nid = $record[$i]->nid;
    // user_tags stores the explicit tags for content.
    // @todo user_tags is always being stored as NULL. :-(
    $user_tags = $terms[$nid];
    $user_tags = is_array($user_tags) ? array_flip($user_tags) : NULL;
    $context['sandbox']['tags_learned'][$nid] = $tags;
    $timestamp = date('Y-m-d G:i:s');

    _mltag_write_record($tags, $user_tags, $timestamp, $nid);
    $i++;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    $context['message'] = 'Node ' . $nid;
  }
  if ($context['finished'] >= 1) {
    mltag_rank_terms($context['sandbox']['tags_learned']);
    $status = "The model has been trained successfully using {$context['sandbox']['progress']} node contents existing on this website. ";
    drupal_set_message($status, 'status');
  }
}

  /**
   * Ranking chi values using z-score method.
   *
   * The z-score of any one criterion
   * is calculated as = (actual value – mean of criterion)
   * divided by standard deviation of criterion.
   */
function mltag_rank_terms($tags_learned) {
  @set_time_limit(180);
  $count = 0;
  $tags_learned_array = array();
  foreach ($tags_learned as $nid => $array) {
    $tags_learned_array = mltag_merge_array($tags_learned_array, $array);
  }
  $sum = 0;
  foreach ($tags_learned_array as $word => $chi) {
    $sum += $chi;
  }
  $mean = $sum / count($tags_learned_array);
  $sd = mltag_sd($tags_learned_array);
  $ranked_tags = array();
  foreach ($tags_learned_array as $word => $chi) {
    $ranked_tags["$word"] = round((($chi - $mean) / $sd), 4);
  }
  arsort($ranked_tags);
  $ranked_tags . "\n";
  // $ranked_tags contain tags ranked using z-score.
  $file = drupal_get_path("module", "mltag") . '/includes/learned_tags.txt';
  file_put_contents($file, urlencode(serialize($ranked_tags)));
}

/**
 * Function to calculate square of value - mean.
 */
function mltag_sd_square($x, $mean) {
  return pow($x - $mean, 2);
}

/**
 * Function to calculate standard deviation (uses sd_square).
 */
function mltag_sd($array) {
  // Square root of sum of squares devided by N-1.
  return sqrt(array_sum(array_map("mltag_sd_square", $array, array_fill(0, count($array), (array_sum($array) / count($array))))) / (count($array) - 1));
}

/**
 * Function to merge trained vocabulary arrays.
 *
 * If on merge duplicate keys(tags or words) are encountered then the one
 * having the maximum value( chi value) is chosen in the final merged array.
 */
function mltag_merge_array($base, $sec) {
  $numargs = func_num_args();
  for ($j = 1; $j < ($numargs); $j++) {
    $m = 0;
    $max = array();
    $sec = func_get_arg($j);
    if (empty($base)) {
      $base = $sec;
      return $base;
    }
    foreach ($base as $base_key => $base_val) {
      foreach ($sec as $sec_key => $sec_val) {
        if ($base_key === $sec_key) {
          $m = max($base_val, $sec_val);
          $max[$base_key] = $m;
        }
        else {
          $base[$sec_key] = $sec_val;
        }
      }
    }
    foreach ($max as $mkey => $mvalue) {
      $base[$mkey] = $mvalue;
    }
    unset($max);
  }
  return $base;
}

/**
 * Implementation of stopwords settings page.
 */
function mltag_stopwords_settings() {
  $form['stopwords_textfield'] = array(
    '#type' => 'textarea',
    '#cols' => 30,
    '#rows' => 10,
    '#title' => t('Stop Words'),
    '#description' => t('Stop Words removed during parsing of text'),
    '#default_vale' => variable_get('stopwords_textfield'),
  );
  return system_settings_form($form);
}

/**
 * Custom Hook- Under development.
 */
function mltag_custom_algorithms() {
  return array(
    'mymodule_first_algo' => array(
      'label' => 'My first awesome algorithm',
      'description' => 'This algorithm selects terms based on a ranking of their awesomeness.',
    ),
    'mymodule_other_algo' => array('label' => 'My other mysterious algorithm',
    ),
  );
}
